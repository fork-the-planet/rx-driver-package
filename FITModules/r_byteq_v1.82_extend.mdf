<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
/***********************************************************************************************************************
* DISCLAIMER
* This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
* No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
* applicable laws, including copyright laws.
* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
* OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
* LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
* INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
* ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
* Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability
* of this software. By using this software, you agree to the additional terms and conditions found by accessing the
* following link:
* http://www.renesas.com/disclaimer
*
* Copyright (C) 2018 Renesas Electronics Corporation. All rights reserved.
***********************************************************************************************************************/
/***********************************************************************************************************************
  Purpose: Module Description File (MDF) Example (Schema Version 2.0)
           This is a description of a sample FIT module configuration file
***********************************************************************************************************************/
-->
<module xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" schemaVersion="2.0" xs:noNamespaceSchemaLocation="schema_mdf_2.00.xsd">
    <fileVersion>1.00</fileVersion>
    <formatVersion>2.00</formatVersion>
    <fileTemplate></fileTemplate>
    <configuration>
        <property id="BYTEQ_CFG_PARAM_CHECKING_ENABLE" display="Parameter check" default="BSP_CFG_PARAM_CHECKING_ENABLE" type="combobox">
            <option id="BYTEQ_CFG_PARAM_CHECKING_ENABLE.BSP_CFG_PARAM_CHECKING_ENABLE" display="Use system default" value="BSP_CFG_PARAM_CHECKING_ENABLE"/>
            <option id="BYTEQ_CFG_PARAM_CHECKING_ENABLE.0" display="Disable parameter checks" value="0"/>
            <option id="BYTEQ_CFG_PARAM_CHECKING_ENABLE.1" display="Enable parameter checks" value="1"/>
            <description>Selects whether to include parameter checking in the code.
Use system default= Use the system default setting.
Disable parameter checks = Omit parameter checking from the build.
Enable parameter checks = Include parameter checking in the build.</description>
        </property>
        <property id="BYTEQ_CFG_USE_HEAP_FOR_CTRL_BLKS" display="Memory allocation for queue control blocks" default="0" type="combobox">
            <option id="BYTEQ_CFG_USE_HEAP_FOR_CTRL_BLKS.0" display="Static memory allocation" value="0"/>
            <option id="BYTEQ_CFG_USE_HEAP_FOR_CTRL_BLKS.1" display="Dynamic memory allocation " value="1"/>
            <description>Selects the memory allocation method for queue control blocks. A queue control block is needed for each queue to maintain in/out indexes. 
Static memory allocation = Queue control blocks are allocated at compile time.
Dynamic memory allocation = Queue control blocks are allocated using  MALLOC().</description>
        </property>
        <property id="BYTEQ_CFG_MAX_CTRL_BLKS" display="Number of static queue control blocks" default="32" type="textbox">
            <constraint display="when target channel is supported only" actionOnFail="disable">${BYTEQ_CFG_USE_HEAP_FOR_CTRL_BLKS} == ${BYTEQ_CFG_USE_HEAP_FOR_CTRL_BLKS.0}</constraint>
            <constraint display="Value must be an integer" actionOnFail="error">testInteger("${BYTEQ_CFG_MAX_CTRL_BLKS}")</constraint>
            <constraint display="Value must be in the range (1~RAM capacity) (x12 bytes per block)" actionOnFail="error">("${BYTEQ_CFG_MAX_CTRL_BLKS}" &gt;= 1) &amp;&amp; (12 * "${BYTEQ_CFG_MAX_CTRL_BLKS}" &lt;= ${Device.ramSize} * 1024)</constraint>
            <description>Specifies how many control blocks to allocate at compile time. 
Do not set 0.</description>
        </property>
    </configuration>
</module>
