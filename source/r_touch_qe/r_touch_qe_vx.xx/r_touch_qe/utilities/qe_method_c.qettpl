/***********************************************************************************************************************
* DISCLAIMER
* This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No
* other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
* applicable laws, including copyright laws.
* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
* THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM
* EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
* SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS
* SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
* Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of
* this software. By using this software, you agree to the additional terms and conditions found by accessing the
* following link:
* http://www.renesas.com/disclaimer
*
* Copyright (C) 2019 Renesas Electronics Corporation. All rights reserved.
***********************************************************************************************************************/
/***********************************************************************************************************************
@qe:begin:SwapTargetMethod
* File Name    : qe_@method@.c
@qe:end:
* Description  : This module implements
***********************************************************************************************************************/
/***********************************************************************************************************************
* History      : DD.MM.YYYY Version Description
*              : 27.09.2018 1.00    First Release
*              : 02.04.2019 1.01    Add Some Comments
*              : 02.04.2019 1.02    Add Section information for VDE Safety Protocols
*              : 18.04.2019 1.03    Change the Minor Format
*              : 18.04.2019 1.04    Correspond to GCC Compiler
*              : 25.04.2019 1.05    Fix the Macros for Section information
*              : 07.05.2019 1.06    Add the Macro for Section information
***********************************************************************************************************************/

/***********************************************************************************************************************
Includes   <System Includes> , "Project Includes"
***********************************************************************************************************************/
#include "platform.h"
@qe:begin:SwapTargetMethod
#include "qe_@method@.h"
@qe:end:
#include "qe_common.h"


/***********************************************************************************************************************
Macro definitions
***********************************************************************************************************************/


/***********************************************************************************************************************
Typedef definitions
***********************************************************************************************************************/


/***********************************************************************************************************************
Exported global variables
***********************************************************************************************************************/

#if (TOUCH_CFG_SAFETY_LINKAGE_ENABLE)
#if (!defined(R_BSP_VERSION_MAJOR) || (R_BSP_VERSION_MAJOR < 5))
#pragma section _QE_TOUCH_SAFETY_CONSTANT
#else
R_BSP_ATTRIB_SECTION_CHANGE(C, _QE_TOUCH_SAFETY_CONSTANT, 1)
#endif
#endif
/* Element arrays must be in hardware scan order */
@qe:begin:SwapTargetMethod
const elem_ch_t g_@method@_elem_ch[] =
@qe:end:
{
@qe:begin:ExportedGlobalVariablesElementChannel
    { .rx_chan=@value@, .tx_chan=@value@ },
@qe:end:
};

#if (TOUCH_CFG_SAFETY_LINKAGE_ENABLE)
#if (!defined(R_BSP_VERSION_MAJOR) || (R_BSP_VERSION_MAJOR < 5))
#pragma section _QE_TOUCH_SAFETY_CONSTANT
#else
R_BSP_ATTRIB_SECTION_CHANGE(C, _QE_TOUCH_SAFETY_CONSTANT, 4)
#endif
#endif
@qe:begin:SwapTargetMethod
const port_cfg_t g_@method@_port_cfg[] =
@qe:end:
{
@qe:begin:ExportedGlobalVariablesPortConfig
    { .p_pmr=&@value@.BYTE, .ts_board_mask=@value@, .ts_method_mask=@value@ },
@qe:end:
};

#if (TOUCH_CFG_SAFETY_LINKAGE_ENABLE)
#if (!defined(R_BSP_VERSION_MAJOR) || (R_BSP_VERSION_MAJOR < 5))
#pragma section _QE_TOUCH_SAFETY_RAMINIT
#else
R_BSP_ATTRIB_SECTION_CHANGE(D, _QE_TOUCH_SAFETY_RAMINIT, 2)
#endif
#endif
@qe:begin:SwapTargetMethod
elem_regs_t g_@method@_elem_regs[] =
@qe:end:
{
@qe:begin:ExportedGlobalVariablesElementRegister
    { .ctsussc=@value@, .ctsuso0=@value@, .ctsuso1=@value@ },
@qe:end:
};

#if (TOUCH_CFG_SAFETY_LINKAGE_ENABLE)
#if (!defined(R_BSP_VERSION_MAJOR) || (R_BSP_VERSION_MAJOR < 5))
#pragma section _QE_TOUCH_SAFETY_RAMINIT
#else
R_BSP_ATTRIB_SECTION_CHANGE(D, _QE_TOUCH_SAFETY_RAMINIT, 4)
#endif
#endif
@qe:begin:SwapTargetMethod
ctsu_cfg_t g_ctsu_cfg_@method@ =
@qe:end:
{
@qe:begin:ExportedGlobalVariablesCtsuConfigChannelMask
    .ctsuchac0 = @value@,   /* ch0-ch7 enable mask */
    .ctsuchac1 = @value@,   /* ch8-ch15 enable mask */
    .ctsuchac2 = @value@,   /* ch16-ch23 enable mask */
    .ctsuchac3 = @value@,   /* ch24-ch31 enable mask */
    .ctsuchac4 = @value@,   /* ch32-ch39 enable mask */
@qe:end:

@qe:begin:ExportedGlobalVariablesCtsuConfigTxChannelMask
    .ctsuchtrc0 = @value@,   /* ch0-ch7 mutual tx mask */
    .ctsuchtrc1 = @value@,   /* ch8-ch15 mutual tx mask */
    .ctsuchtrc2 = @value@,   /* ch16-ch23 mutual tx mask */
    .ctsuchtrc3 = @value@,   /* ch24-ch31 mutual tx mask */
    .ctsuchtrc4 = @value@,   /* ch32-ch39 mutual tx mask */
@qe:end:

@qe:begin:ExportedGlobalVariablesCtsuConfigCtsucr1
    .ctsucr1 = @value@,
    .ctsusdprs = @value@,
@qe:end:

@qe:begin:SwapTargetMethod
    .p_elem_ch = g_@method@_elem_ch,
    .p_elem_regs = g_@method@_elem_regs,
    .p_scan_buf = (uint16_t *)g_@method@_ico_data,
    .p_port_cfg = g_@method@_port_cfg,
    .num_elements = @METHOD@_NUM_ELEMENTS,
@qe:end:
@qe:begin:ExportedGlobalVariablesCtsuConfigNumberPorts
    .num_ports = @value@,
@qe:end:
@qe:begin:SwapTargetMethod
    .method = QE_METHOD_@METHOD@,
@qe:end:
@qe:begin:ExportedGlobalVariablesCtsuConfigTxvsel
    .txvsel = @value@,
@qe:end:
    .ctsu_status = 0
};

#if (TOUCH_CFG_SAFETY_LINKAGE_ENABLE)
#if (!defined(R_BSP_VERSION_MAJOR) || (R_BSP_VERSION_MAJOR < 5))
#pragma section
#else
R_BSP_ATTRIB_SECTION_CHANGE_END
#endif
#endif


@qe:begin:SwapTargetMethod
#if (@METHOD@_NUM_BUTTONS != 0)
btn_ctrl_t g_buttons_@method@[] =
@qe:end:
{
@qe:begin:ExportedGlobalVariablesTifStructureEachButton
    {
        .elem_index = @value@,
        .thr_offset = @METHOD@_@TIF@_THR_OFFSET,
        .hys_offset = @METHOD@_@TIF@_HYS_OFFSET,
    },
@qe:end:
};
#endif


@qe:begin:SwapTargetMethod
#if (@METHOD@_NUM_SLIDERS != 0)
sldr_ctrl_t g_sliders_@method@[] =
@qe:end:
{
@qe:begin:ExportedGlobalVariablesTifStructureEachSlider
    {
        .elem_index[0] = @value@,
        .elem_index[1] = @value@,
        .elem_index[2] = @value@,
        .elem_index[3] = @value@,
        .elem_index[4] = @value@,
        .elem_index[5] = @value@,
        .elem_index[6] = @value@,
        .elem_index[7] = @value@,
        .elem_index[8] = @value@,
        .elem_index[9] = @value@,
        .num_elements = @value@,
        .threshold = @METHOD@_@TIF@_THRESHOLD,   /* Position calculation start threshold value */
        .thr_offset = @METHOD@_@TIF@_THR_OFFSET,   /* Threshold offset value */
        .resolution = @METHOD@_@TIF@_RESOLUTION,   /* Position resolution */
        .value = 0xFFFF,
    },
@qe:end:
};
#endif


@qe:begin:SwapTargetMethod
#if (@METHOD@_NUM_WHEELS != 0)
wheel_ctrl_t g_wheels_@method@[] =
@qe:end:
{
@qe:begin:ExportedGlobalVariablesTifStructureEachWheel
    {
        .elem_index[0] = @value@,
        .elem_index[1] = @value@,
        .elem_index[2] = @value@,
        .elem_index[3] = @value@,
        .elem_index[4] = @value@,
        .elem_index[5] = @value@,
        .elem_index[6] = @value@,
        .elem_index[7] = @value@,
        .num_elements = @value@,
        .threshold = @METHOD@_@TIF@_THRESHOLD,   /* Position calculation start threshold value */
        .thr_offset = @METHOD@_@TIF@_THR_OFFSET,   /* Threshold offset value */
        .resolution = @METHOD@_@TIF@_RESOLUTION,   /* Position resolution */
        .value = 0xffff
    },
@qe:end:
};
#endif


@qe:begin:SwapTargetMethod
touch_cfg_t g_touch_cfg_@method@ =
@qe:end:
{
@qe:begin:ExportedGlobalVariablesTouchConfigPButtons
    .p_buttons = @value@,
@qe:end:
@qe:begin:ExportedGlobalVariablesTouchConfigPSliders
    .p_sliders = @value@,
@qe:end:
@qe:begin:ExportedGlobalVariablesTouchConfigPWheels
    .p_wheels = @value@,
@qe:end:
@qe:begin:ExportedGlobalVariablesTouchConfigButtonMasks
    .button_masks = {@value@},
@qe:end:
@qe:begin:SwapTargetMethod
    .button_masks_size = @METHOD@_BTN_MASKS_SIZE,
    .num_buttons = @METHOD@_NUM_BUTTONS,
    .num_sliders = @METHOD@_NUM_SLIDERS,
    .num_wheels = @METHOD@_NUM_WHEELS,
    .touch_on = @METHOD@_TOUCH_ON,   /* 0-255 The cumulative number of determinations of [ON]; SELF_TOUCH_ON */
    .touch_off = @METHOD@_TOUCH_OFF,   /* 0-255 The cumulative number of determinations of [OFF]; SELF_TOUCH_OFF */
    .max_on_time = @METHOD@_MAX_ON_TIME,   /* 0-65535 Maximum continuous [ON], 0:no use; SELF_MSA */
    .drift_enable = @METHOD@_DRIFT_ENABLE,   /* Drift function enable; SELF_DRIFT_ENABLE */
    .drift_freq = @METHOD@_DRIFT_FREQ,   /* 0-65535; SELF_DRIFT_FREQUENCY */
@qe:end:
};


/***********************************************************************************************************************
External global variables and functions
***********************************************************************************************************************/


/***********************************************************************************************************************
Private global variables and functions
***********************************************************************************************************************/

@qe:begin:SwapTargetMethod
uint16_t    g_@method@_write[sizeof(elem_regs_t)*@METHOD@_NUM_ELEMENTS];   /* DTC transmit write data */
#if (QE_METHOD_@METHOD@_CAPACITANCE_TYPE == TOUCH_SELF_MODE)
self_ico_t  g_@method@_ico_data[@METHOD@_NUM_ELEMENTS];   /* ICO counter data */
self_ico_t  g_@method@_raw_data[@METHOD@_NUM_ELEMENTS];   /* ICO counter data copy for API Get() */
uint16_t    g_@method@_add_sensor[@METHOD@_NUM_ELEMENTS];   /* Sensor counter data adding buffer */
uint16_t    g_@method@_sensor_cnt[@METHOD@_NUM_ELEMENTS];   /* Secondary - Primary (Sensor) */
#else
mutual_ico_t g_@method@_ico_data[@METHOD@_NUM_ELEMENTS];   /* ICO counter data */
mutual_ico_t g_@method@_raw_data[@METHOD@_NUM_ELEMENTS];   /* ICO counter data copy for API Get() */
uint16_t    g_@method@_add_pri_sensor[@METHOD@_NUM_ELEMENTS];   /* Primary Sensor counter data adding buffer */
uint16_t    g_@method@_add_snd_sensor[@METHOD@_NUM_ELEMENTS];   /* Secondary Sensor counter data adding buffer */
uint16_t    g_@method@_sensor_diff[@METHOD@_NUM_ELEMENTS];   /* Secondary - Primary (Sensor) */
#endif
int8_t      g_@method@_current_sign[@METHOD@_NUM_ELEMENTS];   /* Current offset plus minus sign */
#if (@METHOD@_NUM_BUTTONS != 0)
uint16_t    g_@method@_ref[@METHOD@_NUM_BUTTONS];   /* Reference */
uint16_t    g_@method@_thr[@METHOD@_NUM_BUTTONS];   /* Threshold = Reference + User threshold */
uint16_t    g_@method@_user_thr[@METHOD@_NUM_BUTTONS];   /* User threshold */
uint16_t    g_@method@_hys[@METHOD@_NUM_BUTTONS];   /* Hysteresis */
uint16_t    g_@method@_delta[@METHOD@_NUM_BUTTONS];   /* Delta = Reference - Sensor counter */
uint16_t    g_@method@_touch_cnt[@METHOD@_NUM_BUTTONS];   /* Touch count */
uint16_t    g_@method@_non_touch_cnt[@METHOD@_NUM_BUTTONS];   /* Non-touch count */
uint16_t    g_@method@_in_touch[@METHOD@_BTN_MASKS_SIZE];   /* Inside touch/non-touch data */
uint16_t    g_@method@_out_touch[@METHOD@_BTN_MASKS_SIZE];   /* Outside touch/non-touch data */
uint16_t    g_@method@_touch_result[@METHOD@_BTN_MASKS_SIZE];   /* Touch/non-touch result data */
uint16_t    g_@method@_drift_permission[@METHOD@_BTN_MASKS_SIZE];   /* Drift permission */
uint32_t    g_@method@_drift_ref[@METHOD@_NUM_BUTTONS];   /* Drift addition reference */
uint16_t    g_@method@_drift_cnt[@METHOD@_NUM_BUTTONS];   /* Drift counter */

@qe:begin:PrivateGlobalVariables
uint16_t    g_@method@_key_uesd_info[@value@];
#endif
uint8_t     g_@method@_sensor_index[@value@];   /* Key sensor index */
@qe:end:
@qe:begin:SwapTargetMethod
int8_t      g_@method@_counter_magni[@METHOD@_NUM_ELEMENTS];   /* Measurement time */
uint16_t    g_@method@_tune_ctsuso[@METHOD@_NUM_ELEMENTS];   /* Offset tuning ctsuso data */
volatile uint8_t    g_@method@_tune_result[@METHOD@_NUM_ELEMENTS];   /* Offset tuning result data */
@qe:end:
